{"version":3,"file":"js/722.1673251416147.1e05f3f81e72e5ea89c8.js","mappings":"yaAQO,SAASA,I,IAAK,sDAMnB,OALW,QAAY,CAAC,EAAG,EAAF,CACvB,KACA,EAAAC,EAAA,IAAwB,CAAEC,oBAAqB,CAAC,SAAU,YACvDC,GAAU,GAGjB,C,cCVMC,GAAa,IAAAC,OACjB,WACE,wCAIEC,GAAW,IAAAD,OACf,WAAM,wCAEFE,GAAoB,IAAAF,OACxB,WACE,wCAaSG,EAAS,WAAM,OAC1B,kBAAC,EAAAC,SAAQ,CACPC,SACE,kBAAC,EAAAC,SAAQ,KACP,kBAAC,EAAAC,QAAO,QAIZ,kBAAC,EAAAC,OAAM,KACL,kBAAC,EAAAC,MAAK,CAACC,KAAK,UAAUC,UAAWZ,IACjC,kBAAC,EAAAU,MAAK,CAACC,KAAK,QAAQC,UAAWV,IAC/B,kBAAC,EAAAQ,MAAK,CAACC,KAAK,kBAAkBC,UAAWT,IAEzC,kBAAC,EAAAO,MAAK,KACJ,kBAAC,EAAAG,SAAQ,CAACC,GAAG,cAdO,E,8BCW5B,QA5BY,WACV,IAAMC,GAAU,IAAAC,cACV,GAA8B,EAAAC,EAAA,KAA5BC,EAAE,KAAEC,EAAmB,sBAkB/B,OAhBA,IAAAC,YAAU,YACS,UACRC,SAAS,CAAEC,cAAe,OAGnCH,EAAoB,eACpB,IAAMI,EAAaL,EAAG,kBAAkB,SAACM,GACvC,OAAAT,EAAQU,KAAK,WAAID,EAAME,OAAvB,IAEF,OAAO,WACDH,GACFA,GAEJ,CACF,GAAG,IAGD,kBAAC,EAAAI,SAAQ,KACP,kBAAC,KAAmB,MACpB,kBAACvB,EAAM,MAGb,E,sBClCA,IAAMwB,EAAOC,SAASC,eAAe,QAErC,WAAgB,mBCEC,WAAM,OACrB,kBAAC,KAAQ,CACPC,MAAOnC,EAAA,WAAK,EAC6C,IACvDoC,YAEF,kBAAC,gBAAM,CAACC,UAAU,QAAYC,OAAOC,SAASC,WAC5C,kBAAC,EAAG,OAPa,GDFE,MAAKR,GAAM,WAClC,OAAAA,aAAI,EAAJA,EAAMS,aAAa,iBAAkB,OAArC,G","sources":["webpack:///./src/store/index.ts","webpack:///./src/Routes.tsx","webpack:///./src/App.tsx","webpack:///./src/bootstrap.tsx","webpack:///./src/AppEntry.tsx"],"sourcesContent":["import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Middleware } from 'redux';\n\nexport let registry: ReducerRegistry<any>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n","import React, { Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst SamplePage = lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"SamplePage\" */ './Routes/SamplePage/SamplePage'\n    )\n);\nconst OopsPage = lazy(\n  () => import(/* webpackChunkName: \"OopsPage\" */ './Routes/OopsPage/OopsPage')\n);\nconst NoPermissionsPage = lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"NoPermissionsPage\" */ './Routes/NoPermissionsPage/NoPermissionsPage'\n    )\n);\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      <Route path=\"/sample\" component={SamplePage} />\n      <Route path=\"/oops\" component={OopsPage} />\n      <Route path=\"/no-permissions\" component={NoPermissionsPage} />\n      {/* Finally, catch all unmatched routes */}\n      <Route>\n        <Redirect to=\"/sample\" />\n      </Route>\n    </Switch>\n  </Suspense>\n);\n","import React, { Fragment, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Reducer } from 'redux';\n\nimport { Routes } from './Routes';\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst App = () => {\n  const history = useHistory();\n  const { on, updateDocumentTitle } = useChrome();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer as Reducer });\n\n    // You can use directly the name of your app\n    updateDocumentTitle('Starter app');\n    const unregister = on('APP_NAVIGATION', (event) =>\n      history.push(`/${event.navId}`)\n    );\n    return () => {\n      if (unregister) {\n        unregister();\n      }\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppEntry from './AppEntry';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(<AppEntry />, root, () =>\n  root?.setAttribute('data-ouia-safe', 'true')\n);\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst AppEntry = () => (\n  <Provider\n    store={init(\n      ...(process.env.NODE_ENV !== 'production' ? [logger] : [])\n    ).getStore()}\n  >\n    <Router basename={getBaseName(window.location.pathname)}>\n      <App />\n    </Router>\n  </Provider>\n);\n\nexport default AppEntry;\n"],"names":["init","notificationsMiddleware","errorDescriptionKey","middleware","SamplePage","lazy","OopsPage","NoPermissionsPage","Routes","Suspense","fallback","Bullseye","Spinner","Switch","Route","path","component","Redirect","to","history","useHistory","useChrome","on","updateDocumentTitle","useEffect","register","notifications","unregister","event","push","navId","Fragment","root","document","getElementById","store","getStore","basename","window","location","pathname","setAttribute"],"sourceRoot":""}