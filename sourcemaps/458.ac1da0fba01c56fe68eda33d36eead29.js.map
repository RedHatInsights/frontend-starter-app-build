{"version":3,"file":"js/458.1686569665086.6e8d2a8dca1ffff646a9.js","mappings":"+ZAQO,SAASA,I,IAAK,sDAMnB,OALW,QAAY,CAAC,EAAG,EAAF,CACvB,KACA,EAAAC,EAAA,IAAwB,CAAEC,oBAAqB,CAAC,SAAU,YACvDC,GAAU,GAGjB,C,kPCVMC,GAAa,IAAAC,OACjB,WACE,uCAIEC,GAAW,IAAAD,OACf,WAAM,wCASFE,EAAS,CACb,CACEC,KAAM,iBACNC,SAVsB,IAAAJ,OACxB,WACE,yCAUF,CACEG,KAAM,OACNC,QAASH,GAEX,CACEE,KAAM,IACNC,QAASL,GAGX,CACEM,MAAO,CACLF,KAAM,KAERC,QAASE,EAAA,IAWPC,EAAe,SAACL,GACpB,YADoB,IAAAA,IAAAA,EAAA,IACpBA,EAAOM,KAAI,SAAC,G,IAAEL,EAAI,OAAWM,EAAO,UAAEC,EAAW,cAAEC,EAAY,eAAO,OACpE,kBAAC,EAAAC,MAAW,CAACC,IAAKV,EAAMA,KAAMA,EAAMC,QAAS,kBAACK,EAAO,KAAKE,KACvDJ,EAAaG,GAFoD,GAAtE,EAqBF,QAfgB,WACd,IAAMI,GAAiB,IAAAC,UAAQ,WAAM,OAAAR,EAAaL,EAAb,GAAsB,CAACA,IAC5D,OACE,kBAAC,EAAAc,SAAQ,CACPC,SACE,kBAAC,EAAAC,SAAQ,KACP,kBAAC,EAAAC,QAAO,QAIZ,kBAAC,SAAY,KAAEL,GAGrB,E,kCCzCA,QAlBY,WACF,IAAAM,GAAwB,EAAAC,EAAA,KAAW,oBAS3C,OAPA,IAAAC,YAAU,YACS,UACRC,SAAS,CAAEC,cAAe,OAEnCJ,EAAoB,cACtB,GAAG,IAGD,kBAAC,EAAAK,SAAQ,KACP,kBAAC,KAAmB,MACpB,kBAAC,EAAO,MAGd,E,QCvBA,IAAMC,EAAOC,SAASC,eAAe,QAErC,WAAgB,mBCAC,WAAM,OACrB,kBAAC,KAAQ,CACPC,MAAOlC,EAAA,WAAK,EAC6C,IACvDmC,YAEF,kBAAC,EAAG,MANe,GDAE,MAAKJ,GAAM,WAClC,OAAAA,aAAI,EAAJA,EAAMK,aAAa,iBAAkB,OAArC,G","sources":["webpack:///./src/store/index.ts","webpack:///./src/Routing.tsx","webpack:///./src/App.tsx","webpack:///./src/bootstrap.tsx","webpack:///./src/AppEntry.tsx"],"sourcesContent":["import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Middleware, Reducer } from 'redux';\n\nexport let registry: ReducerRegistry<Reducer>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n","import React, { Suspense, lazy, useMemo } from 'react';\nimport { Route as RouterRoute, Routes as RouterRoutes } from 'react-router-dom';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst SamplePage = lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"SamplePage\" */ './Routes/SamplePage/SamplePage'\n    )\n);\nconst OopsPage = lazy(\n  () => import(/* webpackChunkName: \"OopsPage\" */ './Routes/OopsPage/OopsPage')\n);\nconst NoPermissionsPage = lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"NoPermissionsPage\" */ './Routes/NoPermissionsPage/NoPermissionsPage'\n    )\n);\n\nconst routes = [\n  {\n    path: 'no-permissions',\n    element: NoPermissionsPage,\n  },\n  {\n    path: 'oops',\n    element: OopsPage,\n  },\n  {\n    path: '/',\n    element: SamplePage,\n  },\n  /* Catch all unmatched routes */\n  {\n    route: {\n      path: '*',\n    },\n    element: InvalidObject,\n  },\n];\n\ninterface RouteType {\n  path?: string;\n  element: React.ComponentType;\n  childRoutes?: RouteType[];\n  elementProps?: Record<string, unknown>;\n}\n\nconst renderRoutes = (routes: RouteType[] = []) =>\n  routes.map(({ path, element: Element, childRoutes, elementProps }) => (\n    <RouterRoute key={path} path={path} element={<Element {...elementProps} />}>\n      {renderRoutes(childRoutes)}\n    </RouterRoute>\n  ));\n\nconst Routing = () => {\n  const renderedRoutes = useMemo(() => renderRoutes(routes), [routes]);\n  return (\n    <Suspense\n      fallback={\n        <Bullseye>\n          <Spinner />\n        </Bullseye>\n      }\n    >\n      <RouterRoutes>{renderedRoutes}</RouterRoutes>\n    </Suspense>\n  );\n};\n\nexport default Routing;\n","import React, { Fragment, useEffect } from 'react';\nimport { Reducer } from 'redux';\n\nimport Routing from './Routing';\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst App = () => {\n  const { updateDocumentTitle } = useChrome();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer as Reducer });\n    // You can use directly the name of your app\n    updateDocumentTitle('Starter app');\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routing />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppEntry from './AppEntry';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(<AppEntry />, root, () =>\n  root?.setAttribute('data-ouia-safe', 'true')\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport logger from 'redux-logger';\n\nconst AppEntry = () => (\n  <Provider\n    store={init(\n      ...(process.env.NODE_ENV !== 'production' ? [logger] : [])\n    ).getStore()}\n  >\n    <App />\n  </Provider>\n);\n\nexport default AppEntry;\n"],"names":["init","notificationsMiddleware","errorDescriptionKey","middleware","SamplePage","lazy","OopsPage","routes","path","element","route","InvalidObject","renderRoutes","map","Element","childRoutes","elementProps","Route","key","renderedRoutes","useMemo","Suspense","fallback","Bullseye","Spinner","updateDocumentTitle","useChrome","useEffect","register","notifications","Fragment","root","document","getElementById","store","getStore","setAttribute"],"sourceRoot":""}